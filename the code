#include<iostream>
using namespace std;
void merge(int a[],int lb, int mid, int ub)
{	
	int b[1400],k,i,j; // b array to store the value of sorted sub arrays
	i = lb; 
	j = mid+1;
	k = lb; 
	while ( i<= mid && j<=ub) 
	{
		if(a[i]<a[j])
		{
			b[k] = a[i]; 
			i++; // to move the pointer i to the next index of its sub array
		}
		else
		{
			b[k] = a[j];
			j++; //  to move the pointer j to the next index of its sub array
		}
		k++; // to move the pointer k to the next index of its  array
	}
	if(i>mid) // to store the remaining value present in a sorted sub array, if its adjacent subarray gets exhausted.
	{
		while(j<=ub)
		{
			b[k]=a[j];
			j++;
			k++;
		}
	
	}
	else
	{
		while(i<=mid)
		{
			b[k] = a[i];
			i++;
			k++;
		}
	}
	for(k=lb;k<=ub;k++)
	{
		a[k] = b[k]; // to store the value of b array back to a array.
	}
}
void mergesort( int a[], int begin, int end)
{
	if(begin>= end) // meaning the position og begin index value is equal to the index value of end or smaller than that which means sorting is not posssibe
		return;     // so we use return to leave leave this function.
	
	int mid = begin + (end - begin)/2;
	mergesort(a,begin,mid);
	mergesort(a, mid+1,end);
	merge(a,begin, mid, end);		
}
void printarray(int a[], int size)
{
	cout<< " Merge Sort "<<endl;
	for( int i=0; i < size; i++)
	{
		cout<<a[i]<<" ";
	}
}
int main()
{
	int x,a[1000],z;
	cin>>x;
	for(z=0; z<x;z++)
	{
		cin>>a[z];
	}
	mergesort(a,0,x-1);
	printarray(a,x);
	return 0;
}
